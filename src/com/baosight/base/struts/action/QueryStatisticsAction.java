/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.baosight.base.struts.action;

import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.DynaActionForm;
import org.apache.struts.util.LabelValueBean;

import com.baosight.mode.SmsRecordDept;
import com.baosight.mode.TbSmsSchedule;
import com.baosight.struts.action.BaseDispatchAction;

/**
 * MyEclipse Struts Creation date: 10-13-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class QueryStatisticsAction extends BaseDispatchAction {
	public ActionForward likeSelect(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		DynaActionForm dyForm = (DynaActionForm) form;
		String departid = dyForm.getString("departid");
		String uesrid = dyForm.getString("userid");
		String startTime = dyForm.getString("startTime");
		String endTime = dyForm.getString("endTime");
		String destnumber = dyForm.getString("destnumber");
		String deptName = request.getParameter("deptName");
		if(!"".equals(startTime)){
			startTime +=" 00:00:00";
		}
		if(!"".equals(endTime)){
			endTime+=" 00:00:00";
		}
		String content = dyForm.getString("content");
		Collection<LabelValueBean> collUser = new LinkedList<LabelValueBean>();
		if(departid!=null&&!"".equals(departid)){
			System.out.println("deptId="+departid);
			List list = userMgr.getUserNameAndId(departid);
			for (int j = 0; j < list.size(); j++) {
				Object[] obj = (Object[]) list.get(j);
				collUser.add(new LabelValueBean(obj[1].toString(), obj[0]
						.toString()));
			}
			dyForm.set("deptName", deptName);
			dyForm.set("departid", departid);
		}
		dyForm.set("collUser", collUser);
		TbSmsSchedule tss = new TbSmsSchedule();
		tss.setSenddepartid(departid);
		tss.setSenduserid(uesrid);
		tss.setMessageContent(content);
		tss.setDestNumber(destnumber);
		List recordAll = smsScheduleMgr.findSmsRecord(tss, startTime, endTime);
		long count=recordAll.size();
		startPagingCount(null, request,count);
		startPaging(splitNumber(recordAll), null, request);
		return mapping.findForward("inputQuery");
		
	}
	
	
	public ActionForward executeInput(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		DynaActionForm dyForm = (DynaActionForm) form;
		String deptId =request.getParameter("departid");
		String deptName = request.getParameter("deptName");
		if(deptId!=null&&!"".equals(deptId)){
			System.out.println("deptId="+deptId);
			List list = userMgr.getUserNameAndId(deptId);
			Collection<LabelValueBean> collUser = new LinkedList<LabelValueBean>();
			for (int j = 0; j < list.size(); j++) {
				Object[] obj = (Object[]) list.get(j);
				collUser.add(new LabelValueBean(obj[1].toString(), obj[0]
						.toString()));
			}
			dyForm.set("deptName", deptName);
			dyForm.set("departid", deptId);
			dyForm.set("collUser", collUser);
		}
		
		
		TbSmsSchedule tss = new TbSmsSchedule();
		List recordList = smsScheduleMgr.findSmsRecord(tss, null, null);
		long count=splitNumber(recordList).size();
		startPaging(splitNumber(recordList), null, request);
		startPagingCount(null, request,count);
		return mapping.findForward("inputQuery");
	}
    private List splitNumber(List resultList){
    	List spletList = new ArrayList();
		if(resultList!=null){
			for(int i =0 ; i<resultList.size(); i++){
				SmsRecordDept srd = (SmsRecordDept) resultList.get(i);
				String[] sno;
				if((""+srd.getDestNumber()).indexOf(",")>0){
					sno =(""+srd.getDestNumber()).split(",");
				}else{
				    sno =(""+srd.getDestNumber()).split(";");
				}
				String[] receiveuser = (""+srd.getReceiveuser()).split(",");
				int j = 0;
				for(String sit:sno){
					SmsRecordDept srdNew = new SmsRecordDept();
					srdNew.setDeptname(srd.getDeptname());
					srdNew.setMessageContent(srd.getMessageContent());
					srdNew.setScheduletime(srd.getScheduletime());
					if(sno.length == receiveuser.length){
					 List nameList =commonalityMgr.findByIdReturnName(receiveuser[j]);
					 if(nameList.size()>0){
						 srdNew.setReceiveuser(nameList.get(0).toString());
					 }
					}
					srdNew.setDestNumber(sit);
					srdNew.setUname(srd.getUname());
					spletList.add(srdNew);
					j++;
				}
			}
		}
		return spletList;
    }
	public ActionForward resultUser(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception{
	    return executeInput(mapping,form,request,response);
	}
	public ActionForward chooseQuery(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		DynaActionForm dyForm = (DynaActionForm) form;
		String departid = dyForm.getString("departid");
		List listU = smsUserMgr.findByUserName(departid);
		Collection<LabelValueBean> collDepart = new LinkedList<LabelValueBean>();
		List list = smsDepartMgr.findAllDepartName();
		for (int i = 0; i < list.size(); i++) {
			Object[] ts = (Object[]) list.get(i);
			collDepart.add(new LabelValueBean(ts[1].toString(), ts[0]
					.toString()));
		}
		Collection<LabelValueBean> collUser = new LinkedList<LabelValueBean>();
		for (int j = 0; j < listU.size(); j++) {
			Object[] obj = (Object[]) listU.get(j);
			collUser.add(new LabelValueBean(obj[1].toString(), obj[0]
					.toString()));
		}
		dyForm.set("collDepart", collDepart);
		dyForm.set("collUser", collUser);
		TbSmsSchedule tss = new TbSmsSchedule();
		tss.setDepartid(departid);
		tss.setMessageContent(dyForm.getString("content"));
		tss.setDestNumber(dyForm.getString("destnumber"));
		String startTime = dyForm.getString("startTime");
		String endTime = dyForm.getString("endTime");
		List recordList = smsScheduleMgr.findSmsRecord(tss, startTime, endTime);
		long count=recordList.size();
		startPagingCount(null, request,count);
		startPaging(recordList, null, request);
		
		return mapping.findForward("trunToPage");
	}

	public ActionForward movePageCur(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		DynaActionForm dy = (DynaActionForm) form;
		Collection<LabelValueBean> collUser = new LinkedList<LabelValueBean>();
		dy.set("collUser", collUser);
		// 首先获得SESSIONID
		String sessionID = request.getParameter("sessionID");
		if (sessionID == null || sessionID.trim().length() < 5)
			sessionID = "Page_" + System.currentTimeMillis();

		HttpSession session = request.getSession();

		// 转到
		try {
			setMoveTo(Integer.parseInt(request.getParameter("moveTo")));
		} catch (NumberFormatException ex) {

		}

		List res = (List) session.getAttribute(sessionID);

		try {
			setCurPage((Integer) session.getAttribute(sessionID + "No"));
		} catch (NumberFormatException ex) {

		}

		try {
			setMaxPage((Integer) session.getAttribute(sessionID + "MaxNo"));
		} catch (NumberFormatException ex) {

		}

		try {
			setPageSize((Integer) session.getAttribute(sessionID + "Size"));
		} catch (NumberFormatException ex) {

		}
		long count=0;
		try{
			count=(Long)session.getAttribute(sessionID+"Count");
		}catch(NumberFormatException ex){
			
		}
		if (getMoveTo() < 0 || getMoveTo() >= getMaxPage())
			setMoveTo(0);

		setCurPage(getMoveTo());
		startPagingCount(null, request,count);
		startPaging(res, sessionID, request);

		return mapping.findForward("trunToPage");
	}
	public ActionForward resetPageSizeCur(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		DynaActionForm dy = (DynaActionForm) form;
		Collection<LabelValueBean> collUser = new LinkedList<LabelValueBean>();
		dy.set("collUser", collUser);
		// 首先获得SESSIONID
		String sessionID = request.getParameter("sessionID");

		HttpSession session = request.getSession();

		// 转到
		setMoveTo(0);

		List res = (List) session.getAttribute(sessionID);

		setCurPage(0);

		try {
			setPageSize(Integer.parseInt(request.getParameter("pageSize")));
		} catch (NumberFormatException ex) {

		}
		long count=0;
		try{
			count=(Long)session.getAttribute(sessionID+"Count");
		}catch(NumberFormatException ex){
			
		}
		startPagingCount(null, request,count);
		startPaging(res, sessionID, request);
		return mapping.findForward("trunToPage");
	}
}