/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.baosight.base.struts.action;


import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.DynaActionForm;
import org.apache.struts.util.LabelValueBean;
import com.baosight.mode.TbCommonalityComm;
import com.baosight.mode.TbIndividualComm;
import com.baosight.mode.TbSmsSchedule;
import com.baosight.mode.TbUser;
import com.baosight.struts.action.BaseDispatchAction;

/**
 * MyEclipse Struts Creation date: 09-24-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/shortInfo" name="shortInfoForm"
 *                input="/WEB-INF/web/jsp/sendshortinfo/shortInfo.jsp"
 *                scope="request" validate="true"
 */
public class ShortInfoAction extends BaseDispatchAction {
	public ActionForward executeSave(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TbUser user = (TbUser) request.getSession().getAttribute("SYSTEM_USER_SESSION");
		List list = this.deptMgr.getTwoDept(user.getDeptCode());
		String deptName ="";
		if(list!=null){
			 deptName = list.get(0).toString();
		}
		DynaActionForm daf = (DynaActionForm) form;
		TbSmsSchedule tbSms = new TbSmsSchedule();
		//定时发送时间------------- 
		String scheduletime = daf.getString("scheduletime");
		String sendTime_hour = daf.getString("sendTime_hour");
		String sendTime_minute = daf.getString("sendTime_minute");
		scheduletime += " " + sendTime_hour + sendTime_minute;
		String booleanStr = request.getParameter("informRightNow");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		try {
			if (booleanStr != null && "false".equals(booleanStr)) {
				tbSms.setScheduletime(sdf.parse(scheduletime));
			} else {
				tbSms.setScheduletime(sdf.parse(new Date().toLocaleString()));
			}
		} catch (ParseException e) {
			System.out.println("时间转换错误" + e.getMessage());
			return mapping.findForward("submitForward");
		}
		//id
		String commId = request.getParameter("commId");
		String IndivId = request.getParameter("IndivId");
		StringBuilder  userid = new StringBuilder();
		if(commId!=null&&!"".equals(commId)){
			userid.append(commId);
		}
		if(IndivId!=null &&!"".equals(IndivId)){
			userid.append(IndivId);
		}
		tbSms.setUserid(userid.toString());
		//手机号
		String newNumber = (""+request.getParameter("commNumber")).replace(",",";");
		String newIndivNumber = (""+request.getParameter("IndivNumber")).replace(",",";");
		String destNumberPhone = daf.getString("destNumberPhone");
		if(!"".equals(newNumber)){
			tbSms.setDestNumber(newNumber);
		}
		if(!"".equals(newIndivNumber)){
			tbSms.setDestNumber(newIndivNumber);
		}
		if(destNumberPhone!=null && !"".equals(destNumberPhone)){
			if(!"".equals(newNumber)){
				newNumber+=";"+destNumberPhone;
				tbSms.setDestNumber(newNumber);
			}else if(!"".equals(newIndivNumber)){
				newIndivNumber+=";"+destNumberPhone;
				tbSms.setDestNumber(newIndivNumber);
			}else{
				tbSms.setDestNumber(destNumberPhone);
			}
		}
		//内容
		String messageContent = daf.getString("messageContent");
		tbSms.setSenduserid(user.getId());
		tbSms.setSenddepartid(user.getDeptCode());
		tbSms.setMessageContent(messageContent);
		tbSms.setDepartid("");
		tbSms.setSystype("SMS_SYSTEM");
		tbSms.setSendBy("MAS_XXZX");
		// 数据
	    try{
	        this.smsScheduleMgr.save(tbSms);
	        request.setAttribute("state", "<script>alert('信息已发出！');<script>");
	    }catch(Exception e){
	    	System.out.println("e.getMessage="+e.getMessage());
	    	 request.setAttribute("state", "<script>alert('信息发送失败！');<script> ");
	    }
		return mapping.findForward("submitForward");
	}
	public ActionForward executeInput(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// 小时
		List<LabelValueBean> hhList = new ArrayList<LabelValueBean>();
		for (int i = 0; i < 24; i++) {
			if (i < 10)
				hhList.add(new LabelValueBean("0" + i, "0" + i));
			else
				hhList.add(new LabelValueBean("" + i, "" + i));
		}
		// 分钟
		List<LabelValueBean> mmList = new ArrayList<LabelValueBean>();
		for (int i = 0; i < 60; i++) {
			if (i < 10)
				mmList.add(new LabelValueBean(":0" + i, ":0" + i + ":00"));
			else
				mmList.add(new LabelValueBean(":" + i, ":" + i + ":00"));
		}
		request.setAttribute("hhList", hhList);
		request.setAttribute("mmList", mmList);
		DynaActionForm daf = (DynaActionForm) form;
		daf.set("hhList", hhList);
		daf.set("mmList", mmList);
		daf.set("messageContent", "");
		daf.set("destNumberPhone", "");
		daf.set("destNumberObject", "");
		
		return mapping.findForward("list");

	}
	/**
	 * 进入显示公共通讯录组页面
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward inputCommonGroup(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("inputCommonGroup");		
	}
	public ActionForward inputIndualGroup(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("inputIndualGroup");		
	}	
	/**
	 * 显示公共通讯录组页面
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward showCommonGroupTree(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		String id = request.getParameter("cid");
		StringBuffer xml = new StringBuffer();
		//Map funList = functionMgr.findFunByRid(rid);
		List list = this.commonalityCommMgr.findAllForTree(id);
		Iterator iterator = list.iterator();

		xml.append("<?xml version=\"1.0\" encoding=\"GBK\"?>");
		xml.append("<CommonGroups>\r\n");
		xml.append("<isFirst>");
		xml.append("<first>" + "false" + "</first>");
		xml.append("</isFirst>");
		while (iterator.hasNext()) {
			xml.append("<commongroup>\r\n");
			TbCommonalityComm instance = (TbCommonalityComm) iterator.next();
			xml.append("<id>" + instance.getId() + "</id>\r\n");
			xml.append("<title>" + instance.getName() + "</title>\r\n");
			xml.append("<parId>" + instance.getParentId() + "</parId>\r\n");
			xml.append("<isnode>" + (instance.getNode() > 0) + "</isnode>\r\n");
			xml.append("<insure>" + instance.getInuse() + "</insure>\r\n");
			xml.append("</commongroup>\r\n");
		}
		xml.append("</CommonGroups>");
		response.setHeader("Pragma", "No-cache");
		response.setHeader("Cache-Control", "no-cache");
		response.setDateHeader("Expires", 0);
		response.setContentType("text/xml;charset=GBK");
		System.out.println("------------" + xml.toString());
		try {
			response.getWriter().print(xml);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}	
	public ActionForward showIndualGroupTree(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		StringBuffer xml = new StringBuffer();
		List list = this.individualCommMgr.findAllForTree();
		Iterator iterator = list.iterator();

		xml.append("<?xml version=\"1.0\" encoding=\"GBK\"?>");
		xml.append("<IndualGroups>\r\n");
		xml.append("<isFirst>");
		xml.append("<first>" + "false" + "</first>");
		xml.append("</isFirst>");
		while (iterator.hasNext()) {
			xml.append("<indualgroup>\r\n");
			TbIndividualComm instance = (TbIndividualComm) iterator.next();
			xml.append("<id>" + instance.getId() + "</id>\r\n");
			xml.append("<title>" + instance.getName() + "</title>\r\n");
			xml.append("</indualgroup>\r\n");
		}
		xml.append("</IndualGroups>");
		response.setHeader("Pragma", "No-cache");
		response.setHeader("Cache-Control", "no-cache");
		response.setDateHeader("Expires", 0);
		response.setContentType("text/xml;charset=GBK");
		System.out.println("------------" + xml.toString());
		try {
			response.getWriter().print(xml);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}	


}